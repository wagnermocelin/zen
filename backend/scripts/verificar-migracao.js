import mongoose from 'mongoose';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Obter diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Carregar vari√°veis de ambiente do diret√≥rio backend
dotenv.config({ path: join(__dirname, '..', '.env') });

// String de conex√£o atual (banco test)
const DB_TEST = process.env.MONGODB_URI;

// String de conex√£o para o banco de produ√ß√£o
const DB_PRODUCAO = DB_TEST.replace(/\/\?/, '/zen-personal-trainer?');

console.log('üîç Verificando migra√ß√£o de dados...\n');

async function verificarMigracao() {
  try {
    // Conectar aos dois bancos
    console.log('üîå Conectando aos bancos...');
    const connTest = await mongoose.createConnection(DB_TEST).asPromise();
    const connProd = await mongoose.createConnection(DB_PRODUCAO).asPromise();
    
    console.log('‚úÖ Conectado ao banco TEST:', connTest.name);
    console.log('‚úÖ Conectado ao banco PRODU√á√ÉO:', connProd.name);

    // Listar collections do banco test
    const collectionsTest = await connTest.db.listCollections().toArray();
    const collectionsProd = await connProd.db.listCollections().toArray();

    console.log('\nüìä Compara√ß√£o de Dados:\n');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ Collection          ‚îÇ Test     ‚îÇ Produ√ß√£o     ‚îÇ Status ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');

    let todasOk = true;

    for (const collInfo of collectionsTest) {
      const collName = collInfo.name;
      
      // Contar documentos em cada banco
      const countTest = await connTest.db.collection(collName).countDocuments();
      const countProd = await connProd.db.collection(collName).countDocuments();
      
      const status = countTest === countProd ? '‚úÖ OK' : '‚ùå DIFERENTE';
      if (countTest !== countProd) todasOk = false;

      // Formatar linha da tabela
      const collPadded = collName.padEnd(19);
      const testPadded = countTest.toString().padStart(8);
      const prodPadded = countProd.toString().padStart(12);
      
      console.log(`‚îÇ ${collPadded} ‚îÇ ${testPadded} ‚îÇ ${prodPadded} ‚îÇ ${status.padEnd(6)} ‚îÇ`);
    }

    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

    // Verificar se h√° collections no prod que n√£o est√£o no test
    const collNamesTest = collectionsTest.map(c => c.name);
    const collNamesProd = collectionsProd.map(c => c.name);
    const extraProd = collNamesProd.filter(c => !collNamesTest.includes(c));

    if (extraProd.length > 0) {
      console.log('\n‚ö†Ô∏è  Collections extras no banco de produ√ß√£o:');
      extraProd.forEach(c => console.log(`   - ${c}`));
    }

    // Resultado final
    console.log('\nüìã Resultado:');
    if (todasOk) {
      console.log('‚úÖ Todos os dados foram migrados corretamente!');
      console.log('‚úÖ Voc√™ pode atualizar a string de conex√£o no Render.');
    } else {
      console.log('‚ùå H√° diferen√ßas entre os bancos!');
      console.log('‚ö†Ô∏è  Execute o script de migra√ß√£o novamente.');
    }

    // Fechar conex√µes
    await connTest.close();
    await connProd.close();
    
    process.exit(todasOk ? 0 : 1);

  } catch (error) {
    console.error('\n‚ùå Erro ao verificar:', error.message);
    process.exit(1);
  }
}

// Executar verifica√ß√£o
verificarMigracao();
