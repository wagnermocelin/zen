import express from 'express';
import Exercise from '../models/Exercise.js';
import { protect } from '../middleware/auth.js';

const router = express.Router();
router.use(protect);

// @route   GET /api/exercises
// @desc    Listar todos os exerc√≠cios (padr√£o + customizados do trainer)
// @access  Private
router.get('/', async (req, res) => {
  try {
    console.log('üí™ GET /api/exercises - Requisi√ß√£o recebida');
    console.log('Query params:', req.query);
    
    const { search, category, muscleGroup, equipment, difficulty, popular } = req.query;
    
    let query = {
      $or: [
        { isCustom: false }, // Exerc√≠cios padr√£o
        { trainer: req.user._id } // Exerc√≠cios customizados do pr√≥prio trainer
      ]
    };
    
    // Filtro por busca (nome ou tags)
    if (search) {
      query.$text = { $search: search };
    }
    
    // Filtro por categoria
    if (category) {
      query.category = category;
    }
    
    // Filtro por grupo muscular
    if (muscleGroup) {
      query.muscleGroup = muscleGroup;
    }
    
    // Filtro por equipamento
    if (equipment) {
      query.equipment = equipment;
    }
    
    // Filtro por dificuldade
    if (difficulty) {
      query.difficulty = difficulty;
    }
    
    // Filtro por populares
    if (popular === 'true') {
      query.popular = true;
    }
    
    console.log('Query final:', JSON.stringify(query));
    
    const exercises = await Exercise.find(query)
      .sort({ isCustom: -1, popular: -1, name: 1 }) // Customizados primeiro, depois populares, depois alfab√©tico
      .limit(1000);
    
    console.log(`‚úÖ ${exercises.length} exerc√≠cios encontrados`);
    
    res.json({ success: true, data: exercises });
  } catch (error) {
    console.error('Erro ao buscar exerc√≠cios:', error);
    res.status(500).json({ success: false, message: error.message });
  }
});

// @route   GET /api/exercises/:id
// @desc    Buscar exerc√≠cio por ID
// @access  Private
router.get('/:id', async (req, res) => {
  try {
    const exercise = await Exercise.findById(req.params.id);
    
    if (!exercise) {
      return res.status(404).json({ success: false, message: 'Exerc√≠cio n√£o encontrado' });
    }
    
    // Verificar se o exerc√≠cio √© customizado e pertence ao trainer
    if (exercise.isCustom && exercise.trainer.toString() !== req.user._id.toString()) {
      return res.status(403).json({ success: false, message: 'Acesso negado' });
    }
    
    res.json({ success: true, data: exercise });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
});

// @route   POST /api/exercises
// @desc    Criar exerc√≠cio customizado
// @access  Private (Trainer)
router.post('/', async (req, res) => {
  try {
    const exercise = await Exercise.create({
      ...req.body,
      isCustom: true,
      trainer: req.user._id
    });
    
    res.status(201).json({ success: true, data: exercise });
  } catch (error) {
    res.status(400).json({ success: false, message: error.message });
  }
});

// @route   PUT /api/exercises/:id
// @desc    Atualizar exerc√≠cio customizado
// @access  Private (Trainer)
router.put('/:id', async (req, res) => {
  try {
    const exercise = await Exercise.findById(req.params.id);
    
    if (!exercise) {
      return res.status(404).json({ success: false, message: 'Exerc√≠cio n√£o encontrado' });
    }
    
    // Apenas exerc√≠cios customizados podem ser editados
    if (!exercise.isCustom) {
      return res.status(403).json({ success: false, message: 'N√£o √© poss√≠vel editar exerc√≠cios padr√£o' });
    }
    
    // Verificar se pertence ao trainer
    if (exercise.trainer.toString() !== req.user._id.toString()) {
      return res.status(403).json({ success: false, message: 'Acesso negado' });
    }
    
    const updatedExercise = await Exercise.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    
    res.json({ success: true, data: updatedExercise });
  } catch (error) {
    res.status(400).json({ success: false, message: error.message });
  }
});

// @route   DELETE /api/exercises/:id
// @desc    Deletar exerc√≠cio customizado
// @access  Private (Trainer)
router.delete('/:id', async (req, res) => {
  try {
    const exercise = await Exercise.findById(req.params.id);
    
    if (!exercise) {
      return res.status(404).json({ success: false, message: 'Exerc√≠cio n√£o encontrado' });
    }
    
    // Apenas exerc√≠cios customizados podem ser deletados
    if (!exercise.isCustom) {
      return res.status(403).json({ success: false, message: 'N√£o √© poss√≠vel deletar exerc√≠cios padr√£o' });
    }
    
    // Verificar se pertence ao trainer
    if (exercise.trainer.toString() !== req.user._id.toString()) {
      return res.status(403).json({ success: false, message: 'Acesso negado' });
    }
    
    await exercise.deleteOne();
    
    res.json({ success: true, message: 'Exerc√≠cio deletado com sucesso' });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
});

export default router;
